---
import "../assets/styles.css";
import CodeEditor from "../components/CodeEditor";
import TabsEditor from "../components/TabsEditor";
import App from "../components/App";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>AWP Editor</title>
  </head>
  <body
    class="fixed overflow-hidden w-full min-h-full text-gray-900 dark:text-white bg-white dark:bg-gray-900"
  >
    <header class="relative pt-10 xl:pt-0 mt-14">
      <div class="text-center text-3xl">AWP Editor</div>
    </header>
    <main class="relative">
      <div class="relative pt-10 xl:pt-0 mt-14">
        <div class="max-w-8xl mx-auto sm:px-6 md:px-8">
          <div
            class="editor-container relative bg-slate-800 shadow-xl p-2 overflow-hidden sm:rounded-xl dark:bg-slate-900/70 dark:backdrop-blur dark:ring-1 dark:ring-inset dark:ring-white/10 min-h-96"
          >
            <div class="editor">
              <CodeEditor client:only="react" />
              <!-- <TabsEditor client:only="react" /> -->
            </div>
            <div class="preview">
              <iframe src="src/components/Preview.astro"></iframe>
            </div>
          </div>
        </div>
      </div>
    </main>
  </body>
</html>

<script>
  import { WebContainer } from "@webcontainer/api";
  import { files } from "../assets/files";

  const iframeEl: HTMLIFrameElement | null = document.querySelector("iframe");
  const textareaEl: HTMLTextAreaElement | null =
    document.querySelector("textarea");
  let webcontainerInstance: WebContainer;

  async function installDependencies() {
    // Install dependencies
    const installProcess = await webcontainerInstance.spawn("npm", ["install"]);

    installProcess.output.pipeTo(
      new WritableStream({
        write(data) {
          console.log(data);
        },
      })
    );
    // Wait for install command to exit
    return installProcess.exit;
  }

  async function startDevServer() {
    // Run `npm run start` to start the Express app
    await webcontainerInstance.spawn("npm", ["run", "start"]);

    // Wait for `server-ready` event
    webcontainerInstance.on("server-ready", (port, url) => {
      iframeEl!.src = url;
    });
  }

  window.addEventListener("load", async () => {
    textareaEl!.value = files["index.js"].file.contents;
    // Call only once
    webcontainerInstance = await WebContainer.boot();
    await webcontainerInstance.mount(files);

    const exitCode = await installDependencies();
    if (exitCode !== 0) {
      throw new Error("Installation failed");
    }

    startDevServer();
  });
</script>

<style>
  .editor-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    height: 100%;
    width: 100%;
  }

  textarea {
    width: 100%;
    height: 100%;
    resize: none;
    border-radius: 0.5rem;
    background: black;
    color: white;
    padding: 0.5rem 1rem;
  }

  iframe {
    height: 100%;
    width: 100%;
    border-radius: 0.5rem;
  }
</style>
